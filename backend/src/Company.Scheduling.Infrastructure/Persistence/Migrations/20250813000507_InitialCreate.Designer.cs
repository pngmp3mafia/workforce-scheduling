// <auto-generated />
using System;
using Company.Scheduling.Infrastructure.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Company.Scheduling.Infrastructure.Persistence.Migrations
{
    [DbContext(typeof(SchedulingDbContext))]
    [Migration("20250813000507_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Company.Scheduling.Domain.Assignment", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("Assignments", (string)null);
                });

            modelBuilder.Entity("Company.Scheduling.Domain.AvailabilityWindow", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("AvailabilityWindows", (string)null);
                });

            modelBuilder.Entity("Company.Scheduling.Domain.Employee", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Employees", (string)null);
                });

            modelBuilder.Entity("Company.Scheduling.Domain.EmployeeSkill", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("EmployeeId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("EmployeeId");

                    b.ToTable("EmployeeSkills", (string)null);
                });

            modelBuilder.Entity("Company.Scheduling.Domain.Shift", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateOnly>("Date")
                        .HasColumnType("date");

                    b.HasKey("Id");

                    b.ToTable("Shifts", (string)null);
                });

            modelBuilder.Entity("Company.Scheduling.Domain.ShiftSkillRequirement", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<Guid>("ShiftId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ShiftId");

                    b.ToTable("ShiftSkillRequirements", (string)null);
                });

            modelBuilder.Entity("Company.Scheduling.Domain.Assignment", b =>
                {
                    b.HasOne("Company.Scheduling.Domain.Shift", null)
                        .WithMany("Assignments")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Scheduling.Domain.AvailabilityWindow", b =>
                {
                    b.HasOne("Company.Scheduling.Domain.Employee", null)
                        .WithMany("Availability")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Company.Scheduling.Domain.ValueObjects.TimeOnlyRange", "TimeRange", b1 =>
                        {
                            b1.Property<Guid>("AvailabilityWindowId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("time")
                                .HasColumnName("EndTime");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("time")
                                .HasColumnName("StartTime");

                            b1.HasKey("AvailabilityWindowId");

                            b1.ToTable("AvailabilityWindows");

                            b1.WithOwner()
                                .HasForeignKey("AvailabilityWindowId");
                        });

                    b.OwnsOne("Company.Scheduling.Domain.ValueObjects.DateOnlyRange", "DateRange", b1 =>
                        {
                            b1.Property<Guid>("AvailabilityWindowId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<DateOnly>("End")
                                .HasColumnType("date")
                                .HasColumnName("EndDate");

                            b1.Property<DateOnly>("Start")
                                .HasColumnType("date")
                                .HasColumnName("StartDate");

                            b1.HasKey("AvailabilityWindowId");

                            b1.ToTable("AvailabilityWindows");

                            b1.WithOwner()
                                .HasForeignKey("AvailabilityWindowId");
                        });

                    b.Navigation("DateRange")
                        .IsRequired();

                    b.Navigation("TimeRange")
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Scheduling.Domain.EmployeeSkill", b =>
                {
                    b.HasOne("Company.Scheduling.Domain.Employee", null)
                        .WithMany("Skills")
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Scheduling.Domain.Shift", b =>
                {
                    b.OwnsOne("Company.Scheduling.Domain.ValueObjects.TimeOnlyRange", "TimeRange", b1 =>
                        {
                            b1.Property<Guid>("ShiftId")
                                .HasColumnType("uniqueidentifier");

                            b1.Property<TimeOnly>("End")
                                .HasColumnType("time")
                                .HasColumnName("EndTime");

                            b1.Property<TimeOnly>("Start")
                                .HasColumnType("time")
                                .HasColumnName("StartTime");

                            b1.HasKey("ShiftId");

                            b1.ToTable("Shifts");

                            b1.WithOwner()
                                .HasForeignKey("ShiftId");
                        });

                    b.Navigation("TimeRange")
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Scheduling.Domain.ShiftSkillRequirement", b =>
                {
                    b.HasOne("Company.Scheduling.Domain.Shift", null)
                        .WithMany("RequiredSkills")
                        .HasForeignKey("ShiftId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Company.Scheduling.Domain.Employee", b =>
                {
                    b.Navigation("Availability");

                    b.Navigation("Skills");
                });

            modelBuilder.Entity("Company.Scheduling.Domain.Shift", b =>
                {
                    b.Navigation("Assignments");

                    b.Navigation("RequiredSkills");
                });
#pragma warning restore 612, 618
        }
    }
}
